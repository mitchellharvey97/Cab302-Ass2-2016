/**
 * 
 */
package asgn2Tests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import asgn2Passengers.First;
import asgn2Passengers.Passenger;
import asgn2Passengers.PassengerException;

/**
 * @author Mitchell
 *
 */
public class PassengerTests {

	/**
	 * @throws java.lang.Exception
	 */
	public static int startingIndex;
	public First first_pass;
	public First bad_pass;

	@Before
	public void setUpBeforeClass() throws Exception {
		first_pass = new First(10, 20);
		startingIndex = extract_pass_id(first_pass);
	}

	private int extract_pass_id(Passenger pas) {
		// Get the passenger ID number, exclude the class identifier
		String[] splitID = pas.getPassID().split(":");
		int pass_id = Integer.parseInt(splitID[1]);
		return pass_id;
	}

	// General Passenger Class Tests
	@Test
	public void check_pass_index_incriments() throws PassengerException {
		assertEquals("F:" + startingIndex, first_pass.getPassID());

		// Create second passenger
		First second_pass = new First(10, 21);

		// assertEquals("F:" + (startingIndex + 1), second_pass.getPassID());
		// FInd the loop start value
		int loop_pass_start = extract_pass_id(second_pass) + 1;
		System.out.println("Pass ID : " + loop_pass_start);

		for (int x = loop_pass_start; x < loop_pass_start + 10; x++) {
			First mass_pass = new First(10, 20);

			String expected_pass_id = "F:" + (loop_pass_start + x);

			System.out.println(expected_pass_id + " should be " + mass_pass.getPassID());

			// assertEquals(x, extract_pass_id(mass_pass));

			assertEquals(expected_pass_id, mass_pass.getPassID());

		}

	}

	// Booking less than 0
	@Test(expected = PassengerException.class)
	public void invalid_booking_time() throws PassengerException {
		bad_pass = new First(-3, 6);
	}

	// Departure less than 0
	@Test(expected = PassengerException.class)
	public void invalid_depart_time() throws PassengerException {
		bad_pass = new First(5, -6);
	}

	// Departure equal to 0
	@Test(expected = PassengerException.class)
	public void invalid_depart_time_0() throws PassengerException {
		bad_pass = new First(5, 0);
	}

	// Departure less than booking
	@Test(expected = PassengerException.class)
	public void depart_time_before_booking() throws PassengerException {
		bad_pass = new First(10, 4);
	}

	// Successful Cancel Seat
	@Test
	public void cancel_seat() throws PassengerException {
		// Need to confirm to cancel
		first_pass.confirmSeat(10, 20);
		// check staring values are correct
		assertTrue(first_pass.isConfirmed());
		assertFalse(first_pass.isNew());
		first_pass.cancelSeat(1);
		assertFalse(first_pass.isConfirmed());
	}

	public void cancel_seat_new_pas() {

	}

	@Test
	public void confirm_seat() throws PassengerException {
		assertFalse(first_pass.isConfirmed());
		first_pass.confirmSeat(10, 12);
		assertTrue(first_pass.isConfirmed());
	}

}
